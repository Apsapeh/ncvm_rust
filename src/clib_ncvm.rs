#![allow(warnings)]
pub type REGISTER = ::std::os::raw::c_uchar;
#[repr(u8)]
pub enum Register {
	R0 = 0,
	R1 = 1,
	R2 = 2,
	R3 = 3,
	R4 = 4,
	R5 = 5,
	R6 = 6,
	R7 = 7,
}
pub type OPCODE = ::std::os::raw::c_uchar;
#[repr(u8)]
pub enum Opcode {
	NOP = 0,
	STOP = 1,
	RET = 2,
	IMOV = 3,
	LMOV = 4,
	FMOV = 5,
	DMOV = 6,
	IRCLR = 7,
	LRCLR = 8,
	FRCLR = 9,
	DRCLR = 10,
	ISR = 11,
	LSR = 12,
	IRSI = 13,
	ILSI = 14,
	LRSI = 15,
	LLSI = 16,
	IRSA = 17,
	ILSA = 18,
	LRSA = 19,
	LLSA = 20,
	ISMLD = 21,
	ISMST = 22,
	LSMLD = 23,
	LSMST = 24,
	FSMLD = 25,
	FSMST = 26,
	DSMLD = 27,
	DSMST = 28,
	POPI = 29,
	POPA = 30,
	IPUSH = 31,
	ISTLD = 32,
	ISTST = 33,
	LPUSH = 34,
	LSTLD = 35,
	LSTST = 36,
	FPUSH = 37,
	FSTLD = 38,
	FSTST = 39,
	DPUSH = 40,
	DSTLD = 41,
	DSTST = 42,
	ALLOC = 43,
	FREE = 44,
	HELD = 45,
	HEST = 46,
	IADD = 47,
	ISUB = 48,
	IMULT = 49,
	IDIV = 50,
	IMOD = 51,
	IINC = 52,
	IDEC = 53,
	INEG = 54,
	LADD = 55,
	LSUB = 56,
	LMULT = 57,
	LDIV = 58,
	LMOD = 59,
	LINC = 60,
	LDEC = 61,
	LNEG = 62,
	FADD = 63,
	FSUB = 64,
	FMULT = 65,
	FDIV = 66,
	FINC = 67,
	FDEC = 68,
	FNEG = 69,
	DADD = 70,
	DSUB = 71,
	DMULT = 72,
	DDIV = 73,
	DINC = 74,
	DDEC = 75,
	DNEG = 76,
	LTOI = 77,
	FTOI = 78,
	DTOI = 79,
	ITOL = 80,
	FTOL = 81,
	DTOL = 82,
	ITOF = 83,
	LTOF = 84,
	DTOF = 85,
	ITOD = 86,
	LTOD = 87,
	FTOD = 88,
	JMP = 89,
	IJEZ = 90,
	IJNZ = 91,
	IJEQ = 92,
	IJNQ = 93,
	IJML = 94,
	IJEL = 95,
	IJMG = 96,
	IJEG = 97,
	LJEZ = 98,
	LJNZ = 99,
	LJEQ = 100,
	LJNQ = 101,
	LJML = 102,
	LJEL = 103,
	LJMG = 104,
	LJEG = 105,
	FJEZ = 106,
	FJNZ = 107,
	FJEQ = 108,
	FJNQ = 109,
	FJML = 110,
	FJEL = 111,
	FJMG = 112,
	FJEG = 113,
	DJEZ = 114,
	DJNZ = 115,
	DJEQ = 116,
	DJNQ = 117,
	DJML = 118,
	DJEL = 119,
	DJMG = 120,
	DJEG = 121,
	CALL = 122,
	LIBCALL = 123,
}
/* automatically generated by rust-bindgen 0.69.4 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const NCVM_OK: u32 = 0;
pub const NCVM_U32_NOT_32_BIT: u32 = 1;
pub const NCVM_U64_NOT_64_BIT: u32 = 2;
pub const NCVM_IS_BIG_ENDIAN: u32 = 3;
pub const NCVM_STACK_ALLOC_ERROR: u32 = 4;
pub const NCVM_INCOMPATIBLE_VERSION: u32 = 5;
pub const NCVM_LIB_FUNCTION_NOT_FOUND: u32 = 6;
pub const NCVM_BYTECODE_READ_ERROR: u32 = 7;
pub const NCVM_MIN_VERSION: u32 = 0;
pub const NCVM_VERSION: u32 = 0;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Instruction {
    pub opcode: OPCODE,
    pub r1: u8,
    pub r2: u8,
    pub r3: u8,
}
#[test]
fn bindgen_test_layout_Instruction() {
    const UNINIT: ::std::mem::MaybeUninit<Instruction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Instruction>(),
        4usize,
        concat!("Size of: ", stringify!(Instruction))
    );
    assert_eq!(
        ::std::mem::align_of::<Instruction>(),
        1usize,
        concat!("Alignment of ", stringify!(Instruction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Instruction),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Instruction),
            "::",
            stringify!(r1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Instruction),
            "::",
            stringify!(r2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r3) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(Instruction),
            "::",
            stringify!(r3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ThreadSettings {
    pub u32_reg_size: u8,
    pub u64_reg_size: u8,
    pub f32_reg_size: u8,
    pub f64_reg_size: u8,
    pub stack_size: ::std::os::raw::c_ulong,
    pub call_stack_size: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_ThreadSettings() {
    const UNINIT: ::std::mem::MaybeUninit<ThreadSettings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ThreadSettings>(),
        24usize,
        concat!("Size of: ", stringify!(ThreadSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ThreadSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ThreadSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32_reg_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(u32_reg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64_reg_size) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(u64_reg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f32_reg_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(f32_reg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f64_reg_size) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(f64_reg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_stack_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(call_stack_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncvm_thread {
    pub vm: *mut ::std::os::raw::c_void,
    pub current_instr_p: *const Instruction,
    pub stack_p: *mut ::std::os::raw::c_void,
    pub call_stack_p: *mut ::std::os::raw::c_void,
    pub u32_registers: *mut u32,
    pub u64_registers: *mut u64,
    pub f32_registers: *mut f32,
    pub f64_registers: *mut f64,
}
#[test]
fn bindgen_test_layout_ncvm_thread() {
    const UNINIT: ::std::mem::MaybeUninit<ncvm_thread> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncvm_thread>(),
        64usize,
        concat!("Size of: ", stringify!(ncvm_thread))
    );
    assert_eq!(
        ::std::mem::align_of::<ncvm_thread>(),
        8usize,
        concat!("Alignment of ", stringify!(ncvm_thread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm_thread),
            "::",
            stringify!(vm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_instr_p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm_thread),
            "::",
            stringify!(current_instr_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm_thread),
            "::",
            stringify!(stack_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_stack_p) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm_thread),
            "::",
            stringify!(call_stack_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32_registers) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm_thread),
            "::",
            stringify!(u32_registers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64_registers) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm_thread),
            "::",
            stringify!(u64_registers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f32_registers) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm_thread),
            "::",
            stringify!(f32_registers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f64_registers) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm_thread),
            "::",
            stringify!(f64_registers)
        )
    );
}
pub type ncvm_lib_function = ::std::option::Option<unsafe extern "C" fn(thread: *mut ncvm_thread)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncvm {
    pub inst_p: *mut Instruction,
    pub inst_count: ::std::os::raw::c_ulong,
    pub static_mem_p: *mut u8,
    pub static_mem_size: ::std::os::raw::c_ulong,
    pub main_thread_settings: ThreadSettings,
    pub lib_functions: *mut ncvm_lib_function,
}
#[test]
fn bindgen_test_layout_ncvm() {
    const UNINIT: ::std::mem::MaybeUninit<ncvm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncvm>(),
        64usize,
        concat!("Size of: ", stringify!(ncvm))
    );
    assert_eq!(
        ::std::mem::align_of::<ncvm>(),
        8usize,
        concat!("Alignment of ", stringify!(ncvm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inst_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm),
            "::",
            stringify!(inst_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inst_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm),
            "::",
            stringify!(inst_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_mem_p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm),
            "::",
            stringify!(static_mem_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_mem_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm),
            "::",
            stringify!(static_mem_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_thread_settings) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm),
            "::",
            stringify!(main_thread_settings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lib_functions) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm),
            "::",
            stringify!(lib_functions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ByteCodeBlocksInfo {
    pub static_mem_idx: ::std::os::raw::c_ulong,
    pub inst_idx: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_ByteCodeBlocksInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ByteCodeBlocksInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ByteCodeBlocksInfo>(),
        16usize,
        concat!("Size of: ", stringify!(ByteCodeBlocksInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ByteCodeBlocksInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ByteCodeBlocksInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_mem_idx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ByteCodeBlocksInfo),
            "::",
            stringify!(static_mem_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inst_idx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ByteCodeBlocksInfo),
            "::",
            stringify!(inst_idx)
        )
    );
}
extern "C" {
    #[doc = "@brief Initialize VM\n@param inst_p Instructions array\n@param static_mem_p Static memory\n@return VM"]
    pub fn ncvm_init(
        vm: *mut ncvm,
        inst_p: *mut Instruction,
        static_mem_p: *mut u8,
        get_lib_function: ::std::option::Option<
            unsafe extern "C" fn(
                name: *const ::std::os::raw::c_char,
                lib_data_p: *mut ::std::os::raw::c_void,
            ) -> ncvm_lib_function,
        >,
        lib_data_p: *mut ::std::os::raw::c_void,
    ) -> u8;
}
extern "C" {
    #[doc = "@brief Load VM from bytecode data\n@param data_p Bytecode data\n@param data_size Bytecode data size\n@return VM"]
    pub fn ncvm_loadBytecodeData(
        vm: *mut ncvm,
        data_p: *const u8,
        data_size: ::std::os::raw::c_ulong,
        get_lib_function: ::std::option::Option<
            unsafe extern "C" fn(
                name: *const ::std::os::raw::c_char,
                lib_data_p: *mut ::std::os::raw::c_void,
            ) -> ncvm_lib_function,
        >,
        lib_data_p: *mut ::std::os::raw::c_void,
    ) -> u8;
}
extern "C" {
    #[doc = "@brief Load VM from bytecode stream\n@param get_next_n_bytes Function to get next n bytes\n@param data_p Data pointer\n@param ret_code Return code\n@return VM"]
    pub fn ncvm_loadBytecodeStream(
        vm: *mut ncvm,
        get_next_n_bytes: ::std::option::Option<
            unsafe extern "C" fn(
                n: ::std::os::raw::c_ulong,
                data_p: *mut ::std::os::raw::c_void,
            ) -> *const u8,
        >,
        data_p: *mut ::std::os::raw::c_void,
        get_lib_function: ::std::option::Option<
            unsafe extern "C" fn(
                name: *const ::std::os::raw::c_char,
                lib_data_p: *mut ::std::os::raw::c_void,
            ) -> ncvm_lib_function,
        >,
        lib_data_p: *mut ::std::os::raw::c_void,
    ) -> u8;
}
extern "C" {
    #[doc = "@brief Free VM\n@param vm VM"]
    pub fn ncvm_free(vm: *mut ncvm);
}
extern "C" {
    #[doc = "@param vm VM"]
    pub fn ncvm_execute(vm: *mut ncvm) -> u8;
}
extern "C" {
    pub fn ncvm_create_thread(
        thread: *mut ncvm_thread,
        vm: *mut ncvm,
        start_instr_p: *const Instruction,
        ext_stack_p: *mut u8,
        ext_stack_s: ::std::os::raw::c_ulong,
        settings: ThreadSettings,
    ) -> u8;
}
extern "C" {
    pub fn ncvm_thread_free(thread: *mut ncvm_thread);
}
extern "C" {
    pub fn ncvm_execute_thread_step(thread: *mut ncvm_thread) -> u8;
}
extern "C" {
    pub fn ncvm_execute_thread(thread: *mut ncvm_thread) -> u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncvm_default_lib_loader {
    pub lib_handlers: *mut *mut ::std::os::raw::c_void,
    pub lib_handlers_count: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_ncvm_default_lib_loader() {
    const UNINIT: ::std::mem::MaybeUninit<ncvm_default_lib_loader> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncvm_default_lib_loader>(),
        16usize,
        concat!("Size of: ", stringify!(ncvm_default_lib_loader))
    );
    assert_eq!(
        ::std::mem::align_of::<ncvm_default_lib_loader>(),
        8usize,
        concat!("Alignment of ", stringify!(ncvm_default_lib_loader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lib_handlers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm_default_lib_loader),
            "::",
            stringify!(lib_handlers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lib_handlers_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm_default_lib_loader),
            "::",
            stringify!(lib_handlers_count)
        )
    );
}
extern "C" {
    pub fn ncvm_default_lib_loader_init(
        lib_names: *mut *const ::std::os::raw::c_char,
        lib_names_count: ::std::os::raw::c_ulong,
    ) -> ncvm_default_lib_loader;
}
extern "C" {
    pub fn ncvm_default_get_lib_function(
        name: *const ::std::os::raw::c_char,
        loader: *mut ::std::os::raw::c_void,
    ) -> ncvm_lib_function;
}
extern "C" {
    pub fn ncvm_default_lib_function_loader_free(loader: *mut ncvm_default_lib_loader);
}


