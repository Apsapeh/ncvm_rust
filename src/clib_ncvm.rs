#![allow(warnings)]
pub type REGISTER = ::std::os::raw::c_uchar;
#[repr(u8)]
pub enum Register {
	R0 = 0,
	R1 = 1,
	R2 = 2,
	R3 = 3,
	R4 = 4,
	R5 = 5,
	R6 = 6,
	R7 = 7,
}
pub type OPCODE = ::std::os::raw::c_uchar;
#[repr(u8)]
pub enum Opcode {
	NOP = 0,
	STOP = 1,
	RET = 2,
	IPUSH = 3,
	IPOP = 4,
	ISTLD = 5,
	ISTST = 6,
	LPUSH = 7,
	LPOP = 8,
	LSTLD = 9,
	LSTST = 10,
	FPUSH = 11,
	FPOP = 12,
	FSTLD = 13,
	FSTST = 14,
	DPUSH = 15,
	DPOP = 16,
	DSTLD = 17,
	DSTST = 18,
	ALLOC = 19,
	FREE = 20,
	HELD = 21,
	HEST = 22,
	IMOV = 23,
	LMOV = 24,
	FMOV = 25,
	DMOV = 26,
	ISR = 27,
	LSR = 28,
	FSR = 29,
	DSR = 30,
	ISMLD = 31,
	ISMST = 32,
	LSMLD = 33,
	LSMST = 34,
	FSMLD = 35,
	FSMST = 36,
	DSMLD = 37,
	DSMST = 38,
	IADD = 39,
	ISUB = 40,
	IMULT = 41,
	IDIV = 42,
	IMOD = 43,
	IINC = 44,
	IDEC = 45,
	LADD = 46,
	LSUB = 47,
	LMULT = 48,
	LDIV = 49,
	LMOD = 50,
	LINC = 51,
	LDEC = 52,
	FADD = 53,
	FSUB = 54,
	FMULT = 55,
	FDIV = 56,
	FINC = 57,
	FDEC = 58,
	DADD = 59,
	DSUB = 60,
	DMULT = 61,
	DDIV = 62,
	DINC = 63,
	DDEC = 64,
	FTOI = 65,
	ITOF = 66,
	DTOI = 67,
	ITOD = 68,
	FTOL = 69,
	LTOF = 70,
	DTOL = 71,
	LTOD = 72,
	FTOD = 73,
	DTOF = 74,
	JMP = 75,
	IJEZ = 76,
	IJNZ = 77,
	IJEQ = 78,
	IJNQ = 79,
	IJML = 80,
	IJEL = 81,
	IJMG = 82,
	IJEG = 83,
	LJEZ = 84,
	LJNZ = 85,
	LJEQ = 86,
	LJNQ = 87,
	LJML = 88,
	LJEL = 89,
	LJMG = 90,
	LJEG = 91,
	FJEZ = 92,
	FJNZ = 93,
	FJEQ = 94,
	FJNQ = 95,
	FJML = 96,
	FJEL = 97,
	FJMG = 98,
	FJEG = 99,
	DJEZ = 100,
	DJNZ = 101,
	DJEQ = 102,
	DJNQ = 103,
	DJML = 104,
	DJEL = 105,
	DJMG = 106,
	DJEG = 107,
	L_CALL = 108,
}
/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone)]
pub struct Instruction {
    pub opcode: OPCODE,
    pub r1: ::std::os::raw::c_uchar,
    pub r2: ::std::os::raw::c_uchar,
    pub r3: Instruction_LongOrDouble,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Instruction_LongOrDouble {
    pub vali: ::std::os::raw::c_ulonglong,
    pub valf: f64,
}
#[test]
fn bindgen_test_layout_Instruction_LongOrDouble() {
    const UNINIT: ::std::mem::MaybeUninit<Instruction_LongOrDouble> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Instruction_LongOrDouble>(),
        8usize,
        concat!("Size of: ", stringify!(Instruction_LongOrDouble))
    );
    assert_eq!(
        ::std::mem::align_of::<Instruction_LongOrDouble>(),
        8usize,
        concat!("Alignment of ", stringify!(Instruction_LongOrDouble))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vali) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Instruction_LongOrDouble),
            "::",
            stringify!(vali)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Instruction_LongOrDouble),
            "::",
            stringify!(valf)
        )
    );
}
#[test]
fn bindgen_test_layout_Instruction() {
    const UNINIT: ::std::mem::MaybeUninit<Instruction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Instruction>(),
        16usize,
        concat!("Size of: ", stringify!(Instruction))
    );
    assert_eq!(
        ::std::mem::align_of::<Instruction>(),
        8usize,
        concat!("Alignment of ", stringify!(Instruction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Instruction),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Instruction),
            "::",
            stringify!(r1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Instruction),
            "::",
            stringify!(r2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Instruction),
            "::",
            stringify!(r3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncvm {
    pub inst_p: *mut Instruction,
    pub inst_count: ::std::os::raw::c_ulong,
    pub static_mem_p: *mut ::std::os::raw::c_uchar,
    pub static_mem_size: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_ncvm() {
    const UNINIT: ::std::mem::MaybeUninit<ncvm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ncvm>(),
        32usize,
        concat!("Size of: ", stringify!(ncvm))
    );
    assert_eq!(
        ::std::mem::align_of::<ncvm>(),
        8usize,
        concat!("Alignment of ", stringify!(ncvm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inst_p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm),
            "::",
            stringify!(inst_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inst_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm),
            "::",
            stringify!(inst_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_mem_p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm),
            "::",
            stringify!(static_mem_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_mem_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ncvm),
            "::",
            stringify!(static_mem_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ThreadSettings {
    pub u32_reg_size: ::std::os::raw::c_ulong,
    pub u64_reg_size: ::std::os::raw::c_ulong,
    pub f32_reg_size: ::std::os::raw::c_ulong,
    pub f64_reg_size: ::std::os::raw::c_ulong,
    pub stack_size: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_ThreadSettings() {
    const UNINIT: ::std::mem::MaybeUninit<ThreadSettings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ThreadSettings>(),
        40usize,
        concat!("Size of: ", stringify!(ThreadSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ThreadSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ThreadSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32_reg_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(u32_reg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64_reg_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(u64_reg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f32_reg_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(f32_reg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f64_reg_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(f64_reg_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ThreadSettings),
            "::",
            stringify!(stack_size)
        )
    );
}
extern "C" {
    pub fn ncvm_initArr(
        inst_p: *mut Instruction,
        inst_count: ::std::os::raw::c_ulong,
        static_mem_p: *mut ::std::os::raw::c_uchar,
        static_mem_size: ::std::os::raw::c_ulong,
    ) -> ncvm;
}
extern "C" {
    pub fn ncvm_initData(
        data_p: *const ::std::os::raw::c_char,
        data_size: ::std::os::raw::c_ulong,
    ) -> ncvm;
}
extern "C" {
    pub fn ncvm_free(vm: *mut ncvm);
}
extern "C" {
    #[doc = "@param vm VM"]
    pub fn ncvm_execute(vm: *mut ncvm, settings: ThreadSettings) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn ncvm_create_thread(
        vm: *mut ncvm,
        start_instr_p: *mut Instruction,
        ext_stack_p: *mut ::std::os::raw::c_uchar,
        ext_stack_s: ::std::os::raw::c_ulong,
        settings: ThreadSettings,
    ) -> ::std::os::raw::c_uchar;
}


